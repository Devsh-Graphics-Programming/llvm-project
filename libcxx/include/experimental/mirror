// -*- C++ -*-
//===---------------------------- mirror ----------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// This header is a non-standard extension of the ReflectionTS and may be
// changed or removed without prior notice.
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_EXPERIMENTAL_MIRROR
#define _LIBCPP_EXPERIMENTAL_MIRROR

#include <experimental/__config>
#include <__debug>
#include <array>
#include <type_traits>
#include <string_view>

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

#ifdef _LIBCPP_HAS_NO_REFLECTION
# if defined(_LIBCPP_WARNING)
    _LIBCPP_WARNING("<experimental/mirror> cannot be used with this compiler")
# else
#   warning <experimental/mirror> cannot be used with this compiler
# endif
#else
# ifdef _LIBCPP_HAS_NO_REFLECTION_EXT
#  if defined(_LIBCPP_WARNING)
     _LIBCPP_WARNING("<experimental/mirror> cannot be used without -freflection-ext ")
#  else
#    warning <experimental/mirror> cannot be used without -freflection-ext
#  endif
# endif
#endif

#if !defined(_LIBCPP_HAS_NO_REFLECTION) && !defined(_LIBCPP_HAS_NO_REFLECTION_EXT )

_LIBCPP_BEGIN_NAMESPACE_EXPERIMENTAL
namespace mirror {

template <__metaobject_id _Mp>
struct metaobject {};

template <__metaobject_id _Mp>
consteval bool is_meta_object(metaobject<_Mp>) {
  return __metaobject_is_meta_object(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_object_sequence(metaobject<_Mp>) {
  return __metaobject_is_meta_object_sequence(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_named(metaobject<_Mp>) {
  return __metaobject_is_meta_named(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_alias(metaobject<_Mp>) {
  return __metaobject_is_meta_alias(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_scope(metaobject<_Mp>) {
  return __metaobject_is_meta_scope(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_typed(metaobject<_Mp>) {
  return __metaobject_is_meta_typed(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_scope_member(metaobject<_Mp>) {
  return __metaobject_is_meta_scope_member(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_enumerator(metaobject<_Mp>) {
  return __metaobject_is_meta_enumerator(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_record_member(metaobject<_Mp>) {
  return __metaobject_is_meta_record_member(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_base(metaobject<_Mp>) {
  return __metaobject_is_meta_base(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_namespace(metaobject<_Mp>) {
  return __metaobject_is_meta_namespace(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_global_scope(metaobject<_Mp>) {
  return __metaobject_is_meta_global_scope(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_type(metaobject<_Mp>) {
  return __metaobject_is_meta_type(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_enum(metaobject<_Mp>) {
  return __metaobject_is_meta_enum(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_record(metaobject<_Mp>) {
  return __metaobject_is_meta_record(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_class(metaobject<_Mp>) {
  return __metaobject_is_meta_class(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_lambda(metaobject<_Mp>) {
  return __metaobject_is_meta_lambda(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_constant(metaobject<_Mp>) {
  return __metaobject_is_meta_constant(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_variable(metaobject<_Mp>) {
  return __metaobject_is_meta_variable(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_lambda_capture(metaobject<_Mp>) {
  return __metaobject_is_meta_lambda_capture(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_function_parameter(metaobject<_Mp>) {
  return __metaobject_is_meta_function_parameter(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_callable(metaobject<_Mp>) {
  return __metaobject_is_meta_callable(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_function(metaobject<_Mp>) {
  return __metaobject_is_meta_function(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_member_function(metaobject<_Mp>) {
  return __metaobject_is_meta_member_function(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_special_member_function(metaobject<_Mp>) {
  return __metaobject_is_meta_special_member_function(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_constructor(metaobject<_Mp>) {
  return __metaobject_is_meta_constructor(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_destructor(metaobject<_Mp>) {
  return __metaobject_is_meta_destructor(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_operator(metaobject<_Mp>) {
  return __metaobject_is_meta_operator(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_conversion_operator(metaobject<_Mp>) {
  return __metaobject_is_meta_conversion_operator(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_expression(metaobject<_Mp>) {
  return __metaobject_is_meta_expression(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_meta_specifier(metaobject<_Mp>) {
  return __metaobject_is_meta_specifier(_Mp);
}

// unary operations
// boolean
template <__metaobject_id _Mp>
consteval bool is_constexpr(metaobject<_Mp>) {
  return __metaobject_is_constexpr(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_explicit(metaobject<_Mp>) {
  return __metaobject_is_explicit(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_inline(metaobject<_Mp>) {
  return __metaobject_is_inline(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_static(metaobject<_Mp>) {
  return __metaobject_is_static(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_virtual(metaobject<_Mp>) {
  return __metaobject_is_virtual(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_pure_virtual(metaobject<_Mp>) {
  return __metaobject_is_pure_virtual(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_final(metaobject<_Mp>) {
  return __metaobject_is_final(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_private(metaobject<_Mp>) {
  return __metaobject_is_private(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_protected(metaobject<_Mp>) {
  return __metaobject_is_protected(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_public(metaobject<_Mp>) {
  return __metaobject_is_public(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_unnamed(metaobject<_Mp>) {
  return __metaobject_is_unnamed(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_enum(metaobject<_Mp>) {
  return __metaobject_is_enum(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_scoped_enum(metaobject<_Mp>) {
  return __metaobject_is_scoped_enum(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_union(metaobject<_Mp>) {
  return __metaobject_is_union(_Mp);
}

template <__metaobject_id _Mp>
consteval bool uses_class_key(metaobject<_Mp>) {
  return __metaobject_uses_class_key(_Mp);
}

template <__metaobject_id _Mp>
consteval bool uses_struct_key(metaobject<_Mp>) {
  return __metaobject_uses_struct_key(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_const(metaobject<_Mp>) {
  return __metaobject_is_const(_Mp);
}

template <__metaobject_id _Mp>
consteval bool is_volatile(metaobject<_Mp>) {
  return __metaobject_is_volatile(_Mp);
}

template <__metaobject_id _Mp>
consteval bool has_lvalueref_qualifier(metaobject<_Mp>) {
  return __metaobject_has_lvalueref_qualifier(_Mp);
}

template <__metaobject_id _Mp>
consteval bool has_rvalueref_qualifier(metaobject<_Mp>) {
  return __metaobject_has_rvalueref_qualifier(_Mp);
}

// integer
template <__metaobject_id _Mp>
consteval size_t get_id(metaobject<_Mp>) {
  return __metaobject_get_id_value(_Mp);
}

template <__metaobject_id _Mp>
consteval size_t get_source_line(metaobject<_Mp>) {
  return __metaobject_get_source_line(_Mp);
}

template <__metaobject_id _Mp>
consteval size_t get_source_column(metaobject<_Mp>) {
  return __metaobject_get_source_column(_Mp);
}

/*
template <__metaobject_id _Mp>
consteval auto get_pointer(metaobject<_Mp>) {
  return __metaobject_get_pointer(_Mp);
}
*/

consteval auto get_constant_value(__metaobject_id mo) {
  return __metaobject_get_constant(mo);
}

template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_constant(_Mp)>>
consteval auto get_constant(metaobject<_Mp>) {
  return get_constant_value(_Mp);
}

template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_object_sequence(_Mp)>>
consteval size_t get_size(metaobject<_Mp>) {
  return __metaobject_get_size(_Mp);
}

// string
consteval string_view get_source_file_name_view(__metaobject_id mo) {
  return {__metaobject_get_source_file_name(mo),
          __metaobject_source_file_name_len(mo)};
}

template <__metaobject_id _Mp>
consteval string_view get_source_file_name(metaobject<_Mp>) {
  return get_source_file_name_view(_Mp);
}

consteval string_view get_name_view(__metaobject_id mo) {
  return {__metaobject_get_name(mo),
          __metaobject_name_len(mo)};
}

template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_named(_Mp)>>
consteval string_view get_name(metaobject<_Mp>) {
  return get_name_view(_Mp);
}

consteval string_view get_display_name_view(__metaobject_id mo) {
  return {__metaobject_get_display_name(mo),
          __metaobject_display_name_len(mo)};
}

template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_named(_Mp)>>
consteval string_view get_display_name(metaobject<_Mp>) {
  return get_display_name_view(_Mp);
}

// metaobject
template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_scope_member(_Mp)>>
consteval auto get_scope(metaobject<_Mp>) {
  return metaobject<__metaobject_get_scope(_Mp)>{};
}

template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_typed(_Mp)>>
consteval auto get_type(metaobject<_Mp>) {
  return metaobject<__metaobject_get_type(_Mp)>{};
}

template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_enum(_Mp)>>
consteval auto get_underlying_type(metaobject<_Mp>) {
  return metaobject<__metaobject_get_underlying_type(_Mp)>{};
}

template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_alias(_Mp)>>
consteval auto get_aliased(metaobject<_Mp>) {
  return metaobject<__metaobject_get_aliased(_Mp)>{};
}

template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_base(_Mp)>>
consteval auto get_class(metaobject<_Mp>) {
  return metaobject<__metaobject_get_class(_Mp)>{};
}

template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_class(_Mp)>>
consteval auto get_base_classes(metaobject<_Mp>) {
  return metaobject<__metaobject_get_base_classes(_Mp)>{};
}

template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_record(_Mp)>>
consteval auto get_member_types(metaobject<_Mp>) {
  return metaobject<__metaobject_get_member_types(_Mp)>{};
}

template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_record(_Mp)>>
consteval auto get_data_members(metaobject<_Mp>) {
  return metaobject<__metaobject_get_data_members(_Mp)>{};
}

template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_enum(_Mp)>>
consteval auto get_enumerators(metaobject<_Mp>) {
  return metaobject<__metaobject_get_enumerators(_Mp)>{};
}

template <
  __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_callable(_Mp)>>
consteval auto get_parameters(metaobject<_Mp>) {
  return metaobject<__metaobject_get_parameters(_Mp)>{};
}

template <
  size_t _I, __metaobject_id _Mp,
  typename = enable_if_t<__metaobject_is_meta_object_sequence(_Mp)>>
consteval auto get_element(metaobject<_Mp>) {
  return metaobject<__metaobject_get_element(_Mp, _I)>{};
}

// unpacking
template <__metaobject_id ... _Mp>
struct unpacked_metaobject_sequence {};

template <__metaobject_id _Mp>
consteval auto unpack(metaobject<_Mp>) {
  return __unpack_metaobject_seq<unpacked_metaobject_sequence, _Mp>{};
}

// unpacked range operations
template <__metaobject_id... _Mp, typename _Fp>
void for_each(unpacked_metaobject_sequence<_Mp...>, _Fp function) {
  (void)(..., function(metaobject<_Mp>{}));
}

template <typename _Tp, __metaobject_id... _Mp, typename _Fp, typename... _Pp>
_Tp select(unpacked_metaobject_sequence<_Mp...>,
    _Fp function, _Tp fallback, _Pp&&... param) {
  (void)(..., function(fallback, metaobject<_Mp>{}, std::forward<_Pp>(param)...));
  return fallback;
}


#define mirror(...) \
  _VSTD_EXPERIMENTAL::mirror::metaobject<__reflexpr_id(__VA_ARGS__)>{}

} // namespace mirror
_LIBCPP_END_NAMESPACE_EXPERIMENTAL


#endif /* !_LIBCPP_HAS_NO_REFLECTION && !_LIBCPP_HAS_NO_REFLECTION_EXT */

#endif /* _LIBCPP_EXPERIMENTAL_MIRROR */
